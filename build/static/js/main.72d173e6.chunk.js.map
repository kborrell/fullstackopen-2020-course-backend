{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","id","delete","patch","PersonFilter","nameFilter","onFilterChanged","value","onChange","PersonForm","onSubmit","name","phone","onNameChanged","onPhoneChanged","type","Persons","persons","onDeletePerson","filteredPersons","filter","person","includes","map","key","Person","number","onClick","ErrorMessage","message","className","SuccessMessage","App","useState","setPersons","newName","setNewName","newPhone","setNewPhone","setNameFilter","undefined","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","personsService","allPersons","showTimedMessage","setMessage","timer","setTimeout","event","target","preventDefault","length","existingPerson","find","window","confirm","updatedPerson","currentPerson","catch","error","status","addedPerson","newPersons","concat","alert","personToDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72d173e6.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl).then(response => response.data)\n}\n\nconst addPerson = newPerson => {\n    return axios.post(baseUrl, newPerson).then(response => response.data)\n}\n\nconst deletePerson = id => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst updatePerson = (id, newPerson) => {\n    return axios.patch(`${baseUrl}/${id}`, newPerson).then(response => response.data)\n}\n\nexport default {getAll, addPerson, deletePerson, updatePerson}","import React, { useEffect, useState } from 'react'\nimport personsService from './services/persons'\nimport './App.css'\n\nconst PersonFilter = ({nameFilter, onFilterChanged}) => <div>filter shown with <input value={nameFilter} onChange={onFilterChanged} /></div>\n\nconst PersonForm = ({onSubmit, name, phone, onNameChanged, onPhoneChanged}) =>\n  <div>\n    <form onSubmit={onSubmit}>\n      <div>name: <input value={name} onChange={onNameChanged} /></div>\n      <div>phone: <input value={phone} onChange={onPhoneChanged} /></div>\n      <div><button type=\"submit\">add</button></div>\n    </form>\n  </div>\n\nconst Persons = ({persons, nameFilter, onDeletePerson}) => {\n  let filteredPersons = nameFilter ? persons.filter((person) => person.name.includes(nameFilter)) : persons\n  return (\n    <div>{filteredPersons.map((person) => <Person key={person.name} person={person} onDeletePerson={onDeletePerson} />)}</div>\n  )\n}\n\nconst Person = ({person, onDeletePerson}) => <p key={person.name}>{person.name} {person.number} <button onClick={() => onDeletePerson(person)}>delete</button></p>\n\nconst ErrorMessage = ({message}) => {\n  if (message) {\n    return (\n      <div className=\"error\">\n        {message}   \n      </div>\n    )\n  }\n  else\n  {\n    return null;\n  }\n}\n\nconst SuccessMessage = ({message}) => {\n  if (message) {\n    return (\n      <div className=\"success\">\n        {message}   \n      </div>\n    )\n  }\n  else\n  {\n    return null;\n  }\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setNewPhone ] = useState('')\n  const [ nameFilter, setNameFilter ] = useState('')\n  const [ errorMessage, setErrorMessage ] = useState(undefined)\n  const [ successMessage, setSuccessMessage ] = useState(undefined)\n\n  useEffect(() => {\n    personsService.getAll().then(allPersons => setPersons(allPersons))\n  }, [])\n\n  const showTimedMessage = (setMessage, message, timer) => {\n    setMessage(message)\n    setTimeout(() => setMessage(''), timer)\n  }\n\n  const addNewPerson = (event) => {\n    event.preventDefault()\n    if (newName.length > 0) {\n      var existingPerson = persons.find((person) => person.name === newName)\n      if (existingPerson) {\n        if (window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`)) {\n          var updatedPerson = {...existingPerson, number: newPhone}\n          personsService\n            .updatePerson(updatedPerson.id, updatedPerson)\n            .then((newPerson) => {\n              setPersons(persons.map((currentPerson) => currentPerson.id === newPerson.id ? newPerson : currentPerson))\n              setNewName('')\n              setNewPhone('')\n            })\n            .catch((error) => {\n              debugger\n              if (error.response.status === 404) {\n                showTimedMessage(setErrorMessage, `Information of ${newName} has already been removed from the server`, 4000)\n              } else {\n                showTimedMessage(setErrorMessage, `An error has occurred`, 4000)\n              }\n              setNewName('')\n              setNewPhone('')\n            })\n        } else {\n          return;\n        }\n      } else {\n        var newPerson = {\n          name: newName,\n          number: newPhone\n        }\n        personsService\n          .addPerson(newPerson)\n          .then((addedPerson) => {\n            let newPersons = persons.concat(addedPerson)\n            setPersons(newPersons)\n            setNewName('')\n            setNewPhone('')\n            setErrorMessage('')\n            showTimedMessage(setSuccessMessage, `Added ${addedPerson.name}`, 4000)\n          })\n          .catch(() => showTimedMessage(setErrorMessage, `An error has occurred`, 4000))\n      }\n    } else {\n      window.alert(\"Name field can't be empty\")\n    }\n  }\n\n  const deletePerson = (personToDelete) => {\n    if (window.confirm(`Delete ${personToDelete.name}?`)) {\n      personsService\n      .deletePerson(personToDelete.id)\n      .then(() => setPersons(persons.filter((person) => person.id !== personToDelete.id)))\n    }\n  }\n\n  const onNameChanged = (event) => setNewName(event.target.value)\n  const onPhoneChanged = (event) => setNewPhone(event.target.value)\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <SuccessMessage message={successMessage} />\n      <ErrorMessage message={errorMessage} />\n      <PersonFilter persons={persons} onFilterChanged={(event) => setNameFilter(event.target.value)}  />\n      <h3>add a new</h3>\n      <PersonForm onSubmit={addNewPerson} name={newName} phone={newPhone} onNameChanged={onNameChanged} onPhoneChanged={onPhoneChanged} />\n      <h3>Phones</h3>\n      <Persons persons={persons} nameFilter={nameFilter} onDeletePerson={(person) => deletePerson(person)}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}